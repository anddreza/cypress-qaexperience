{"version":3,"sources":["db.js"],"names":["require","Pool","dbConfig","host","user","password","database","deleteUser","email","regeneratorRuntime","async","_context","prev","next","awrap","pool","query","stop","insertUser","data","result","id","_context2","name","is_shaver","sent","rows","abrupt","findToken","_context3","sql"],"mappings":"0BAAiBA,QAAQ,MAAjBC,cAAAA,KACFC,SAAW,CAChBC,KAAM,2BACNC,KAHOH,WAIPI,SAAU,mCAHXC,SAAMJ,WACLC,KAAI,MAGJG,KAAU,IAAAL,KAJMC,UAAA,SAAjBK,WAAAC,GAAiB,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAQXC,KAAOC,MAAIf,qCAAjB,CAAAO,KARiB,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAM,UAUjB,SAAAC,WAAAd,GAAA,IAAAe,EAAAC,EAAAC,EAAA,OAAAZ,mBAAAC,MAAA,SAAAY,GAAA,OAAA,OAAAA,EAAAV,KAAAU,EAAAT,MAAA,KAAA,EAAA,MAAA,4FAAAM,EAAA,CAAAf,EAAAmB,KAAAnB,EAAAI,MAAAJ,EAAAC,SAAAD,EAAAoB,WAAAF,EAAAT,KAAA,EAAAJ,mBAAAK,MAUsBC,KAAKC,MAV3B,4FAUsCG,IAVtC,KAAA,EAAA,OAUOC,EAVPE,EAAAG,KAAAJ,EAAAD,EAAAM,KAAA,GAAAL,GAAAC,EAAAK,OAAA,SAAAN,GAAA,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAAL,UAkBA,SAAeW,UAAUpB,GAAzB,IAAAY,EAAA,OAAAX,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,MAbeK,6HAafW,EAAAhB,KAAA,EAAAJ,mBAAAK,MAZaC,KAAAC,MADEE,6HACF,CAAAV,KAYb,KAAA,EAAA,OAZOsB,EAYPD,EAAAJ,KAVON,QAAAA,IAAAA,EAAQf,KAAKmB,IAUpBM,EAAAF,OAAA,SAbAP,EAAAM,KAAA,IAaA,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAZ,UANSI,OAAAA,QAAOD,CAPhBb,WAAAA,WA6BCW,WAAAA,WA7BDU,UAAAA","file":"db.min.js","sourcesContent":["const { Pool } = require('pg')\nconst dbConfig = {\n\thost: 'babar.db.elephantsql.com',\n\tuser: 'knwprhil',\n\tpassword: 'LszmKao6wNjC76J2K5NXow-7DlTX40zG',\n\tdatabase: 'knwprhil',\n\tport: 5432\n}\n\nconst pool = new Pool (dbConfig)\n\nasync function deleteUser(email){\n\tawait pool.query('DELETE FROM users WHERE email = $1', [email])\n\n}\n\nasync function insertUser (user){\n\tconst sql = 'INSERT INTO users (name, email, password, is_shaver) VALUES ($1, $2, $3, $4) returning id'\n\n\tconst data = [user.name, user.email, user.password, user.is_shaver]\n\n\tconst result = await pool.query(sql, data)\n\n\tconst { id } = result.rows[0]\n\n\treturn id\n\t\n}\n\nasync function findToken(email){\n\tconst sql = 'select B.token from' + \n\t'users A INNER JOIN user_tokens B' + \n\t'ON A.id = B.user_id where' +\n\t'A.email = $1' + \n\t'ORDER bY B.created_at DESC LIMIT 1'\n\n\tconst result = await pool.query(sql, [email])\n\tconsole.log(result.rows[0])\n\n\treturn result.rows[0]\n\n}\n\nmodule.exports = {\n\tdeleteUser,\n\tinsertUser, \n\tfindToken\n}"]}