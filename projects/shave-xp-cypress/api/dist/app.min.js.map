{"version":3,"sources":["app.js"],"names":["bcrypt","require","Joi","validator","createValidator","passError","app","express","deleteUser","insertUser","findToken","object","name","required","email","string","password","userSchema","is_shaver","req","res","json","message","token","regeneratorRuntime","async","_context","prev","next","params","awrap","sent","get","end","abrupt","status","stop","_context2","post","body","_req$body","hashPass","user","id","_context3","hash","console","log","user_id","t0","error","stack","use","err","isJoi","type","listen"],"mappings":"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","file":"app.min.js","sourcesContent":["const bcrypt = require('bcrypt')\nconst Joi = require('joi')\nconst express = require('express')\n\n\nconst validator = require('express-joi-validation').createValidator({\n\tpassError: true\n})\n\n\nconst app = express()\n\napp.use(express.json())\n\nconst { deleteUser, insertUser, findToken } = require('./db')\n\n\nconst userSchema = Joi.object({\n\tname: Joi.string().required(),\n\temail: Joi.string().email().required(),\n\tpassword: Joi.string().required(),\n\tis_shaver: Joi.boolean().required()\n})\n\napp.get('/welcome', function(req, res){\n\tres.json({message: 'Olá'})\n})\n\napp.get('/token/:email', async function(req, res){\n\tconst { email } = req.params\n\tconst token = await findToken(email)\n\tres.status(200).end(token)\n\n\tif(!token){\n\t\treturn res.status(404).end()\n\t} \n\n\tres.status(200).json(token)\n})\n\n\napp.delete('/user/:email', async function(req, res){\n\t\n\tconst { email } = req.params\n\tawait deleteUser(email)\n\tres.status(204).end()\n})\n\napp.post('/user', validator.body(userSchema), async function(req, res){\n\t\n\tconst { name, email, password, is_shaver } = req.body\n\n\tconst hashPass = await bcrypt.hash(password, 8)\n\n\tconst user = {\n\t\tname: name, \n\t\temail: email, \n\t\tpassword: hashPass,\n\t\tis_shaver: is_shaver\n\t}\n\n\t// debito técnico porque ainda não consegue validar o is_shaver da maneira correta\n//\tif(!user.name || !user.email || !user.password){\n//\t\treturn res.status(400).json({ message: 'Every fields is mandatory.'})\n//\t}\n\n\tconsole.log(user)\n\n\ttry{\n\t\tawait deleteUser(user.email)\n\t\tconst id = await insertUser(user)\n\t\tres.status(201).json({ user_id: id })\n\t} catch (error) {\n\t\tres.status(500).json({ error: 'Ocorreu um erro.', stack: error })\n\t}\t\n})\n\napp.use((err, req, res, next) => {\n\tif (err && err.error && err.error.isJoi) {\n\t  // we had a joi error, let's return a custom 400 json response\n\t  res.status(400).json({\n\t\ttype: err.type, // will be \"query\" here, but could be \"headers\", \"body\", or \"params\"\n\t\tmessage: err.error.toString()\n\t  });\n\t} else {\n\t  // pass on to another error handler\n\t  next(err);\n\t}\n  });\n\n  \napp.listen(5000)"]}