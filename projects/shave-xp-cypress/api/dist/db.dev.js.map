{"version":3,"sources":["db.js"],"names":["require","Pool","dbConfig","host","user","password","database","port","pool","deleteUser","email","query","insertUser","sql","data","name","is_shaver","result","id","rows","findToken","console","log","module","exports"],"mappings":";;eAAiBA,OAAO,CAAC,IAAD,C;IAAhBC,I,YAAAA,I;;AACR,IAAMC,QAAQ,GAAG;AAChBC,EAAAA,IAAI,EAAE,0BADU;AAEhBC,EAAAA,IAAI,EAAE,UAFU;AAGhBC,EAAAA,QAAQ,EAAE,kCAHM;AAIhBC,EAAAA,QAAQ,EAAE,UAJM;AAKhBC,EAAAA,IAAI,EAAE;AALU,CAAjB;AAQA,IAAMC,IAAI,GAAG,IAAIP,IAAJ,CAAUC,QAAV,CAAb;;AAEA,SAAeO,UAAf,CAA0BC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACOF,IAAI,CAACG,KAAL,CAAW,oCAAX,EAAiD,CAACD,KAAD,CAAjD,CADP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAeE,UAAf,CAA2BR,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACOS,UAAAA,GADP,GACa,2FADb;AAGOC,UAAAA,IAHP,GAGc,CAACV,IAAI,CAACW,IAAN,EAAYX,IAAI,CAACM,KAAjB,EAAwBN,IAAI,CAACC,QAA7B,EAAuCD,IAAI,CAACY,SAA5C,CAHd;AAAA;AAAA,0CAKsBR,IAAI,CAACG,KAAL,CAAWE,GAAX,EAAgBC,IAAhB,CALtB;;AAAA;AAKOG,UAAAA,MALP;AAOSC,UAAAA,EAPT,GAOgBD,MAAM,CAACE,IAAP,CAAY,CAAZ,CAPhB,CAOSD,EAPT;AAAA,4CASQA,EATR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAeE,SAAf,CAAyBV,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACOG,UAAAA,GADP,GACa,wBACZ,kCADY,GAEZ,2BAFY,GAGZ,cAHY,GAIZ,oCALD;AAAA;AAAA,0CAOsBL,IAAI,CAACG,KAAL,CAAWE,GAAX,EAAgB,CAACH,KAAD,CAAhB,CAPtB;;AAAA;AAOOO,UAAAA,MAPP;AAQCI,UAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACE,IAAP,CAAY,CAAZ,CAAZ;AARD,4CAUQF,MAAM,CAACE,IAAP,CAAY,CAAZ,CAVR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcAI,MAAM,CAACC,OAAP,GAAiB;AAChBf,EAAAA,UAAU,EAAVA,UADgB;AAEhBG,EAAAA,UAAU,EAAVA,UAFgB;AAGhBQ,EAAAA,SAAS,EAATA;AAHgB,CAAjB","sourcesContent":["const { Pool } = require('pg')\nconst dbConfig = {\n\thost: 'babar.db.elephantsql.com',\n\tuser: 'knwprhil',\n\tpassword: 'LszmKao6wNjC76J2K5NXow-7DlTX40zG',\n\tdatabase: 'knwprhil',\n\tport: 5432\n}\n\nconst pool = new Pool (dbConfig)\n\nasync function deleteUser(email){\n\tawait pool.query('DELETE FROM users WHERE email = $1', [email])\n\n}\n\nasync function insertUser (user){\n\tconst sql = 'INSERT INTO users (name, email, password, is_shaver) VALUES ($1, $2, $3, $4) returning id'\n\n\tconst data = [user.name, user.email, user.password, user.is_shaver]\n\n\tconst result = await pool.query(sql, data)\n\n\tconst { id } = result.rows[0]\n\n\treturn id\n\t\n}\n\nasync function findToken(email){\n\tconst sql = 'select B.token from' + \n\t'users A INNER JOIN user_tokens B' + \n\t'ON A.id = B.user_id where' +\n\t'A.email = $1' + \n\t'ORDER bY B.created_at DESC LIMIT 1'\n\n\tconst result = await pool.query(sql, [email])\n\tconsole.log(result.rows[0])\n\n\treturn result.rows[0]\n\n}\n\nmodule.exports = {\n\tdeleteUser,\n\tinsertUser, \n\tfindToken\n}"],"file":"db.dev.js"}