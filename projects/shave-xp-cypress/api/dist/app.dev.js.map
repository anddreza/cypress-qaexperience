{"version":3,"sources":["app.js"],"names":["bcrypt","require","Joi","express","validator","createValidator","passError","app","use","json","deleteUser","insertUser","findToken","userSchema","object","name","string","required","email","password","is_shaver","get","req","res","message","params","token","status","end","post","body","hash","hashPass","user","console","log","id","user_id","error","stack","err","next","isJoi","type","toString","listen"],"mappings":"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","sourcesContent":["const bcrypt = require('bcrypt')\nconst Joi = require('joi')\nconst express = require('express')\n\n\nconst validator = require('express-joi-validation').createValidator({\n\tpassError: true\n})\n\n\nconst app = express()\n\napp.use(express.json())\n\nconst { deleteUser, insertUser, findToken } = require('./db')\n\n\nconst userSchema = Joi.object({\n\tname: Joi.string().required(),\n\temail: Joi.string().email().required(),\n\tpassword: Joi.string().required(),\n\tis_shaver: Joi.boolean().required()\n})\n\napp.get('/welcome', function(req, res){\n\tres.json({message: 'Olá'})\n})\n\napp.get('/token/:email', async function(req, res){\n\tconst { email } = req.params\n\tconst token = await findToken(email)\n\tres.status(200).end(token)\n\n\tif(!token){\n\t\treturn res.status(404).end()\n\t} \n\n\tres.status(200).json(token)\n})\n\n\napp.delete('/user/:email', async function(req, res){\n\t\n\tconst { email } = req.params\n\tawait deleteUser(email)\n\tres.status(204).end()\n})\n\napp.post('/user', validator.body(userSchema), async function(req, res){\n\t\n\tconst { name, email, password, is_shaver } = req.body\n\n\tconst hashPass = await bcrypt.hash(password, 8)\n\n\tconst user = {\n\t\tname: name, \n\t\temail: email, \n\t\tpassword: hashPass,\n\t\tis_shaver: is_shaver\n\t}\n\n\t// debito técnico porque ainda não consegue validar o is_shaver da maneira correta\n//\tif(!user.name || !user.email || !user.password){\n//\t\treturn res.status(400).json({ message: 'Every fields is mandatory.'})\n//\t}\n\n\tconsole.log(user)\n\n\ttry{\n\t\tawait deleteUser(user.email)\n\t\tconst id = await insertUser(user)\n\t\tres.status(201).json({ user_id: id })\n\t} catch (error) {\n\t\tres.status(500).json({ error: 'Ocorreu um erro.', stack: error })\n\t}\t\n})\n\napp.use((err, req, res, next) => {\n\tif (err && err.error && err.error.isJoi) {\n\t  // we had a joi error, let's return a custom 400 json response\n\t  res.status(400).json({\n\t\ttype: err.type, // will be \"query\" here, but could be \"headers\", \"body\", or \"params\"\n\t\tmessage: err.error.toString()\n\t  });\n\t} else {\n\t  // pass on to another error handler\n\t  next(err);\n\t}\n  });\n\n  \napp.listen(5000)"],"file":"app.dev.js"}